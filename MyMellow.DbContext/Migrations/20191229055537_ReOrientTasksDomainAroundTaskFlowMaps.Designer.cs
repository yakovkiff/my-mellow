// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMellow.DbContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MyMellow.DbContext.Migrations
{
    [DbContext(typeof(MyMellowContext))]
    [Migration("20191229055537_ReOrientTasksDomainAroundTaskFlowMaps")]
    partial class ReOrientTasksDomainAroundTaskFlowMaps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MyMellow.Domain.Models.Directory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ParentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Directory");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(4000);

                    b.Property<int>("DirectoryId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.NoteSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NoteId");

                    b.Property<int>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("NoteSchedule");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AlertByEmail");

                    b.Property<DateTime?>("EndAt");

                    b.Property<TimeSpan?>("RepeatEvery");

                    b.Property<DateTime>("StartAt");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagDirectoryMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DirectoryId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("TagId");

                    b.ToTable("TagDirectoryMap");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagNoteMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NoteId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("TagId");

                    b.ToTable("TagNoteMap");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagTaskMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TagId");

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TaskId");

                    b.ToTable("TagTaskMap");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TaskFlow");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskFlowMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("OrderNumber");

                    b.Property<int>("TaskFlowId");

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskFlowId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskFlowMap");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildId");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("TaskMap");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ScheduleId");

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskSchedule");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Directory", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Directory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MyMellow.Domain.Models.Note", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Directory", "Directory")
                        .WithMany("Notes")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.NoteSchedule", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Note", "Note")
                        .WithMany("Schedules")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Schedule", "Schedule")
                        .WithMany("Notes")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagDirectoryMap", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Directory", "Directory")
                        .WithMany("TagMaps")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Tag", "Tag")
                        .WithMany("DirectoryMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagNoteMap", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Note", "Note")
                        .WithMany("TagMaps")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Tag", "Tag")
                        .WithMany("NoteMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TagTaskMap", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Tag", "Tag")
                        .WithMany("TaskMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Task", "Task")
                        .WithMany("TagMaps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskFlowMap", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.TaskFlow", "Flow")
                        .WithMany("TaskFlowMaps")
                        .HasForeignKey("TaskFlowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Task", "Task")
                        .WithMany("TaskFlowMaps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskMap", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Task", "Child")
                        .WithMany("ChildMaps")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Task", "Parent")
                        .WithMany("ParentMaps")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMellow.Domain.Models.TaskSchedule", b =>
                {
                    b.HasOne("MyMellow.Domain.Models.Schedule", "Schedule")
                        .WithMany("Tasks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMellow.Domain.Models.Task", "Task")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
